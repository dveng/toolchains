# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
    is_official_build = false
    is_component_build = false
    is_clang = current_os != "linux"
    host_toolchain = ""
}

#declare_args() {
#    ar = "ar"
#    cc = "cc"
#    cxx = "c++"
#}

declare_args() {
    is_debug = !is_official_build
}

if (target_os == "") {
    target_os = host_os
}

if (target_cpu == "") {
    if (target_os == "android") {
        target_cpu = "arm64"
    } else {
        target_cpu = host_cpu
    }
}

if (current_cpu == "") {
    current_cpu = target_cpu
}

if (current_os == "") {
    current_os = target_os
}

# is_linux = current_os == "linux"
# is_mac = current_os == "mac"
# is_win = current_os == "win"

if (current_os == "win" || current_os == "winuwp") {
    is_ohos = false
    is_chromeos = false
    is_linux = false
    is_mac = false
    is_posix = false
    is_win = true
    is_mingw = false
} else if (current_os == "mac") {
    is_ohos = false
    is_chromeos = false
    is_linux = false
    is_mac = true
    is_posix = true
    is_win = false
    is_mingw = false
} else if (current_os == "ohos") {
    is_ohos = true
    is_chromeos = false
    is_linux = false
    is_mac = false
    is_posix = true
    is_win = false
    is_mingw = false
} else if (current_os == "linux") {
    is_ohos = false
    is_chromeos = false
    is_linux = true
    is_mac = false
    is_posix = true
    is_win = false
    is_mingw = false
} else if (current_os == "mingw") {
    is_ohos = false
    is_chromeos = false
    is_linux = false
    is_mac = false
    is_posix = true
    is_win = false
    is_mingw = true
}

# is_linux = host_os == "linux" && current_os == "linux" && target_os == "linux"
# is_mac = host_os == "mac" && current_os == "mac" && target_os == "mac"
# is_win = host_os == "win" && current_os == "win" && target_os == "win"

# Set to true when compiling with the Clang compiler.
# is_clang = exec_script("//build/toolchain/script/is_clang.py", [], "value")
is_gcc = current_os == "linux"

# All binary targets will get this list of configs by default.
_shared_binary_target_configs = [ "//build:compiler_defaults" ]

# Apply that default list to the binary target types.
set_defaults("executable") {
    configs = _shared_binary_target_configs

    # Executables get this additional configuration.
    configs += [ "//build:executable_ldconfig" ]
}
set_defaults("static_library") {
    configs = _shared_binary_target_configs
}
set_defaults("shared_library") {
    configs = _shared_binary_target_configs
}
set_defaults("source_set") {
    configs = _shared_binary_target_configs
}

# set_default_toolchain("//build/toolchain:gcc")
if (host_toolchain == "") {
    if (host_os == "linux"){
        if (target_os != ""){
        #            host_toolchain = "//build/toolchain/linux:clang_$host_cpu"
            host_toolchain = "//build/toolchain/linux:gcc_like_host"
        }else if (is_clang){
            host_toolchain = "//build/toolchain/linux:clang_$host_cpu"
#            host_toolchain = "//build/toolchain/linux:$host_cpu"
        }else{
            host_toolchain = "//build/toolchain/linux:$host_cpu"
        }
    }else if (host_os == "mac") {
        host_toolchain = "//build/toolchain/mac:clang_$host_cpu"
    }else if (host_os == "win") {
        if(target_cpu == "x86" || target_cpu == "x64") {
            if (is_clang) {
                host_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
            } else {
                host_toolchain = "//build/toolchain/win:$target_cpu"
            }
        } else if (is_clang) {
            host_toolchain = "//build/toolchain/win:win_clang_$host_cpu"
        } else {
            host_toolchain = "//build/toolchain/win:$host_cpu"
        }
    }else{
        assert(false, "Unsupported host_os: $host_os")
    }
}

_default_toolchain = ""
if (target_os == "android") {
    assert(host_os == "linux" || host_os == "mac",
    "ohos builds are only supported on Linux and Mac hosts.")
    if (is_clang){
        _default_toolchain = "//build/toolchain/ohos:ohos_clang_$target_cpu"
    }else{
        _default_toolchain = "//build/toolchain/ohos:ohos_$target_cpu"
    }
} else if (target_os == "linux") {
    print("target_os is_clang=${is_clang}")
    if (is_clang) {
#        _default_toolchain = "//build/toolchain/linux:clang_$target_cpu"
            _default_toolchain = "//build/toolchain/linux:$target_cpu"
    } else {
        print("target_os else is_clang=${is_clang}")
        _default_toolchain = "//build/toolchain/linux:$target_cpu"
    #        _default_toolchain = "//build/toolchain/linux:arm64"
    }
} else {
    assert(false, "Unsupported target_os: $target_os")
}
print("is_clang=${is_clang}")
print("_default_toolchain=${_default_toolchain}")
print("host_toolchain=${host_toolchain}")
set_default_toolchain(_default_toolchain)
default_toolchain_name = "arm64"


#if (is_win) {
## Windows toolchain
#    print("is gcc=${is_gcc}")
#    if (is_gcc) {
#        set_default_toolchain("//build/toolchain/mingw:win_gcc")
#        default_toolchain_name = "win_gcc"
#        host_toolchain = "win_gcc_host"
#    } else {
#    #    set_default_toolchain("//build/toolchain/mingw:win_clang")
#        set_default_toolchain("//build/toolchain/mingw:mingw_x86_64")
#        default_toolchain_name = "win_clang"
#        host_toolchain = "win_clang_host"
#    }
#} else if (is_linux) {
#    if (is_gcc) {
#    # GCC-like toolchains, including Clang.
#        print(is_gcc)
#        print("is gcc = ${is_gcc}")
#        set_default_toolchain("//build/toolchain/linux:gcc_like")
#        # set_default_toolchain("//build/toolchain/linux:arm64")
#        # set_default_toolchain("//build/toolchain/linux:arm")
#        #    set_default_toolchain("//build/toolchain/linux:clang_x64")
#        # set_default_toolchain("//build/toolchain/linux:clang_arm64")
#        # set_default_toolchain("//build/toolchain/linux:clang_arm")
#        default_toolchain_name = "gcc_like"
#        host_toolchain = "gcc_like_host"
#    } else { # if (is_clang) {
#        set_default_toolchain("//build/toolchain:linux_clang")
#        default_toolchain_name = "linux_clang"
#        host_toolchain = "linux_clang"
#    }
#} else if (is_mac) {
#    set_default_toolchain("//build/toolchain/mac:mac_clang")
#    default_toolchain_name = "mac_clang"
#    host_toolchain = "mac_clang_host"
#} else {
#    print("$host unsopport!")
#}