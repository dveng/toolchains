import("//build/toolchain/gcc_toolchain.gni")

gcc_like_toolchain("gcc_like_host") {
  ar = "ar"
  cc = "cc"
  cxx = "c++"
  ld = cxx

  #    ar = host_ar
  #    cc = host_cc
  #    cxx = host_cxx
  #    ld = cxx
  # nm = "nm"
  # readelf = "readelf"

  toolchain_args = {
    current_cpu = host_cpu
    current_os = host_os
  }
}

gcc_like_toolchain("gcc_like") {
  ar = "ar"
  cc = "cc"
  cxx = "c++"
  ld = cxx

  # nm = "nm"
  # readelf = "readelf"
  #    ar = target_ar
  #    cc = target_cc
  #    cxx = target_cxx
  #    ld = cxx

  toolchain_args = {
    current_cpu = current_cpu
    current_os = current_os
  }
}

gcc_like_toolchain("x64") {
  ar = "ar"
  cc = "gcc"
  cxx = "g++"
  ld = cxx

  # readelf = "readelf"
  # nm = "nm"

  # Output linker map files for binary size analysis.
  #   enable_linker_map = true

  toolchain_args = {
    current_cpu = "x64"
    current_os = "linux"

    # is_clang = false
  }
}

gcc_like_toolchain("x86") {
  ar = "ar"
  cc = "gcc"
  cxx = "g++"
  ld = cxx

  #    readelf = "readelf"
  #    nm = "nm"

  # Output linker map files for binary size analysis.
  #    enable_linker_map = true

  toolchain_args = {
    current_cpu = "x86"
    current_os = "linux"

    #   # is_clang = false
  }
}

gcc_like_toolchain("arm64") {
  toolprefix = "aarch64-linux-gnu-"

  ar = "${toolprefix}ar"
  cc = "${toolprefix}gcc"
  cxx = "${toolprefix}g++"
  ld = cxx

  # nm = "${toolprefix}nm"
  # readelf = "${toolprefix}readelf"

  toolchain_args = {
    current_cpu = "arm64"
    current_os = "linux"

    # is_clang = false
  }
}

gcc_like_toolchain("arm") {
  toolprefix = "arm-linux-gnueabihf-"

  ar = "${toolprefix}ar"
  cc = "${toolprefix}gcc"
  cxx = "${toolprefix}g++-10"
  ld = cxx

  # nm = "${toolprefix}nm"
  # readelf = "${toolprefix}readelf"

  toolchain_args = {
    current_cpu = "arm"
    current_os = "linux"

    # is_clang = false
  }
}

clang_toolchain("clang_x64") {
  # strip = rebase_path("${clang_base_path}/bin/llvm-strip", root_build_dir)
  # toolchain_args = {
  #   current_cpu = "x64"
  #   current_os = "linux"
  # }
  toolchain_args = {
    current_cpu = "x64"
    current_os = "linux"
  }
  shlib_extension = ".so"
}

clang_toolchain("clang_x86") {
  # Output linker map files for binary size analysis.
  #     enable_linker_map = true

  toolchain_args = {
    current_cpu = "x86"
    current_os = "linux"
  }
}

clang_toolchain("clang_arm64") {
  #    toolprefix = "aarch64-linux-gnu-"
  toolchain_args = {
    current_cpu = "arm64"
    current_os = "linux"
  }
}

clang_toolchain("clang_arm") {
  # toolprefix = "arm-linux-gnueabihf-"
  toolchain_args = {
    current_cpu = "arm"
    current_os = "linux"
  }
}
