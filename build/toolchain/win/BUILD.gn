declare_args(){
    ar = "ar"
    cc = "gcc"
    cxx = "g++"
}
declare_args() {
    host_ar = ar
    host_cc = cc
    host_cxx = cxx

    target_ar = ar
    target_cc = cc
    target_cxx = cxx

    cc_wrapper = ""
}

if (host_os == "win") {
    stamp = "cmd.exe /c echo >"
} else {
    stamp = "touch"
}

#  tool("copy") {
#    cp_py = rebase_path("./BUILD_cp.py")
#    command = "python $cp_py {{source}} {{output}}"
#    description = "copy {{source}} {{output}}"
#  }

template("gcc_like_toolchain") {
    toolchain(target_name) {
        ar = invoker.ar
        cc = invoker.cc
        cxx = invoker.cxx
        lib_switch = "-l"
        lib_dir_switch = "-L"

        tool("asm") {
            depfile = "{{output}}.d"
            command = "$cc_wrapper $cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs =
            [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
            description = "assemble {{source}}"
        }

        tool("cc") {
            depfile = "{{output}}.d"
            command = "$cc_wrapper $cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs =
            [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
            description = "compile {{source}}"
        }

        tool("cxx") {
            depfile = "{{output}}.d"
            command = "$cc_wrapper $cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs =
            [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
            description = "compile {{source}}"
        }

        tool("objc") {
            depfile = "{{output}}.d"
            command = "$cc_wrapper $cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_objc}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs =
            [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
            description = "compile {{source}}"
        }

        tool("objcxx") {
            depfile = "{{output}}.d"
            command = "$cc_wrapper $cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} {{cflags_objcc}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs =
            [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
            description = "compile {{source}}"
        }

        tool("alink") {
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            ar_py = rebase_path("./BUILD_ar.py")
            command = "python $ar_py $ar {{output}} $rspfile"
            outputs =
            [ "{{root_out_dir}}/{{target_output_name}}{{output_extension}}" ]
            default_output_extension = ".a"
            output_prefix = "lib"
            description = "link {{output}}"
        }

        tool("solink") {
            soname = "{{target_output_name}}{{output_extension}}"

            rpath = "-Wl,-soname,$soname"
            if (is_mac) {
                rpath = "-Wl,-install_name,@rpath/$soname"
            }

            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$cc_wrapper $cxx -shared {{ldflags}} @$rspfile {{solibs}} {{libs}} $rpath -o {{output}}"
            outputs = [ "{{root_out_dir}}/$soname" ]
            output_prefix = "lib"
            default_output_extension = ".so"
            description = "link {{output}}"
        }

        tool("link") {
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$cc_wrapper $cxx {{ldflags}} @$rspfile {{solibs}} {{libs}} -o {{output}}"
            outputs =
            [ "{{root_out_dir}}/{{target_output_name}}{{output_extension}}" ]
            description = "link {{output}}"
        }

        tool("stamp") {
            command = "$stamp {{output}}"
            description = "stamp {{output}}"
        }

        tool("copy") {
            cp_py = rebase_path("./BUILD_cp.py")
            command = "python3 $cp_py {{source}} {{output}}"
            description = "copy {{source}} {{output}}"
        }

        tool("copy_bundle_data") {
            cp_py = rebase_path("./BUILD_cp.py")
            command = "python3 $cp_py {{source}} {{output}}"
            description = "copy_bundle_data {{source}} {{output}}"
        }

        # We don't currently have any xcasset files so make this a NOP
        tool("compile_xcassets") {
            command = "true"
            description = "compile_xcassets {{output}}"
        }

        toolchain_args = {
            current_cpu = invoker.cpu
            current_os = invoker.os
        }
    }
}

gcc_like_toolchain("win_clang_host") {
    cpu = host_cpu
    os = host_os
    ar = host_ar
    cc = host_cc
    cxx = host_cxx
}

gcc_like_toolchain("win_gcc") {
    cpu = current_cpu
    os = current_os
    ar = target_ar
    cc = target_cc
    cxx = target_cxx
}

gcc_like_toolchain("win_gcc_host") {
    cpu = host_cpu
    os = host_os
    ar = host_ar
    cc = host_cc
    cxx = host_cxx
}

gcc_like_toolchain("x64") {
    cpu = current_cpu
    os = current_os
    ar = target_ar
    cc = target_cc
    cxx = target_cxx
}

gcc_like_toolchain("x86") {
    cpu = host_cpu
    os = host_os
    ar = host_ar
    cc = host_cc
    cxx = host_cxx
}

gcc_like_toolchain("arm64") {
    cpu = host_cpu
    os = host_os
    ar = host_ar
    cc = host_cc
    cxx = host_cxx
}

gcc_like_toolchain("arm") {
    cpu = host_cpu
    os = host_os
    ar = host_ar
    cc = host_cc
    cxx = host_cxx
}