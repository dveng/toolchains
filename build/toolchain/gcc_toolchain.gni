#declare_args() {
#    host_ar = ar
#    host_cc = cc
#    host_cxx = cxx
#
#    target_ar = ar
#    target_cc = cc
#    target_cxx = cxx
#
#    cc_wrapper = ""
#}

if (host_os == "win") {
  stamp = "cmd.exe /c echo >"
} else {
  stamp = "touch"
}

# Extension for shared library files (including leading dot).
executable_extension = ""
if (is_mac) {
  shlib_extension = ".dylib"
} else if (is_android && is_component_build) {
  # By appending .z, we prevent name collisions with libraries already loaded by the ohos.
  shlib_extension = ".z.so"
} else if (is_mingw) {
  shlib_extension = ".dll"
  executable_extension = ".exe"
} else if (is_posix) {
  shlib_extension = ".so"
} else if (is_win) {
  shlib_extension = ".dll"
} else {
  assert(false, "Platform not supported")
}
cc_wrapper = ""

template("gcc_like_toolchain") {
  toolchain(target_name) {
    assert(defined(invoker.toolchain_args),
           "Toolchains must specify toolchain_args")
    invoker_toolchain_args = invoker.toolchain_args
    assert(defined(invoker_toolchain_args.current_cpu),
           "toolchain_args must specify a current_cpu")
    assert(defined(invoker_toolchain_args.current_os),
           "toolchain_args must specify a current_os")
#    forward_variables_from(invoker_toolchain_args, "*")
    toolchain_args = {
      forward_variables_from(invoker_toolchain_args, "*")
    }

#    host_toolchain = host_toolchain

    ar = invoker.ar
    cc = invoker.cc
    cxx = invoker.cxx
    ld = invoker.ld

    # if (defined(invoker.nm)) {
    #   nm = invoker.nm
    # } else {
    #   nm = "nm"
    # }
    # if (defined(invoker.readelf)) {
    #   readelf = invoker.readelf
    # } else {
    #   readelf = "readelf"
    # }
    lib_switch = "-l"
    lib_dir_switch = "-L"

    # default_shlib_extension = shlib_extension # 默认库拓展名
    if (defined(invoker.shlib_extension)) {
      default_shlib_extension = invoker.shlib_extension
    } else {
      default_shlib_extension = shlib_extension
    }

    # default_executable_extension = "" # 默认可执行文件拓展名
    if (defined(invoker.executable_extension)) {
      default_executable_extension = invoker.executable_extension
    } else {
      default_executable_extension = ""
    }

    # Bring these into our scope for string interpolation with default values.
    if (defined(invoker.libs_section_prefix)) {
      libs_section_prefix = invoker.libs_section_prefix
    } else {
      libs_section_prefix = ""
    }
    if (defined(invoker.libs_section_postfix)) {
      libs_section_postfix = invoker.libs_section_postfix
    } else {
      libs_section_postfix = ""
    }

    # so 链接库前缀后缀
    if (defined(invoker.solink_libs_section_prefix)) {
      solink_libs_section_prefix = invoker.solink_libs_section_prefix
    } else {
      solink_libs_section_prefix = ""
    }

    if (defined(invoker.solink_libs_section_postfix)) {
      solink_libs_section_postfix = invoker.solink_libs_section_postfix
    } else {
      solink_libs_section_postfix = ""
    }

    # Object files go in this directory.
    # object_subdir = "{{source_out_dir}}/{{target_output_name}}"

    # toolchain_args = {
    #   current_cpu = invoker.current_cpu
    #   current_os = invoker.current_os
    # }

    print("gcc toolchain_args=${toolchain_args}")

    tool("asm") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "assemble {{source}}"
    }

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile cc {{source}}"
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile cxx {{source}}"
    }

    tool("objc") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_objc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile {{source}}"
    }

    tool("objcxx") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} {{cflags_objcc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile {{source}}"
    }

    tool("alink") {
      rspfile = "{{output}}.rsp"
      rspfile_content = "{{inputs}}"
      ar_py = rebase_path("./BUILD_ar.py")
      command = "python $ar_py $ar {{output}} $rspfile"

      # command = "\"$ar\" {{arflags}} -r -c -s -D {{output}} @\"$rspfile\""
      outputs =
          [ "{{root_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_dir = "{{target_out_dir}}"  # new
      default_output_extension = ".a"
      output_prefix = "lib"
      description = "AR {{output}}"  # "alink {{output}}"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"

      rpath = "-Wl,-soname,$soname"
      if (is_mac) {
        rpath = "-Wl,-install_name,@rpath/$soname"
      }

      rspfile = sofile + ".rsp"  # "{{output}}.rsp"

      # rspfile_content = "{{inputs}}"
      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix"

      # link_command = "$ld -shared {{ldflags}} -o \"$sofile\" @\"$rspfile\""
      # if (!is_mingw_link) {
      #   link_command = "$link_command -Wl,-soname=\"$soname\""
      # } else {
      #   link_command = "$link_command -Wl,--out-implib,{{root_out_dir}}/$libfile"
      # }
      command = "$cc_wrapper $ld -shared {{ldflags}} @$rspfile {{solibs}} {{libs}} $rpath -o {{output}}"

      # command = "$cc_wrapper $cxx --readelf=\"$readelf\" --nm=\"$nm\" --sofile=\"$sofile\" --output=\"$sofile\"  -- ${link_command}"
      # command = "$cc_wrapper ${link_command} --sofile=\"$sofile\" --output=\"$sofile\"  "
      outputs = [ "{{root_out_dir}}/$soname" ]
      output_prefix = "lib"
      default_output_dir = "{{root_out_dir}}"
      default_output_extension = default_shlib_extension  # ".so"
      description = "SOLINK $sofile"  # "solink {{output}}"
    }

    tool("link") {
      exename = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$exename"
      rspfile = "$outfile.rsp"  # "{{output}}.rsp"
      rspfile_content = "{{inputs}}"

      default_output_extension = default_executable_extension

      command = "$cc_wrapper $cxx {{ldflags}} $libs_section_prefix @$rspfile {{solibs}} {{libs}} $libs_section_postfix -o {{output}}"
      outputs =
          [ "{{root_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      description = "LINK $outfile"  # "link {{output}}"
      default_output_dir = "{{root_out_dir}}"
    }

    tool("stamp") {
      command = "$stamp {{output}}"
      description = "stamp {{output}}"
    }

    tool("copy") {
      cp_py = rebase_path("./BUILD_cp.py")
      command = "python3 $cp_py {{source}} {{output}}"
      description = "copy {{source}} {{output}}"
    }

    tool("copy_bundle_data") {
      cp_py = rebase_path("./BUILD_cp.py")
      command = "python3 $cp_py {{source}} {{output}}"
      description = "copy_bundle_data {{source}} {{output}}"
    }

    # We don't currently have any xcasset files so make this a NOP
    tool("compile_xcassets") {
      command = "true"
      description = "compile_xcassets {{output}}"
    }
  }
}

template("clang_toolchain") {
  # if (defined(invoker.toolprefix)) {
  #   toolprefix = invoker.toolprefix
  # } else {
  #   toolprefix = ""
  # }

  gcc_like_toolchain(target_name) {
    # prefix = rebase_path("$clang_base_path/bin", root_build_dir)
    prefix = rebase_path("/home/linux/native/llvm/bin", root_build_dir)
    ar = "${prefix}/llvm-ar"
    cc = "$prefix/clang"
    cxx = "$prefix/clang++"
    ld = cxx

    # nm = "${toolprefix}nm"
    # readelf = "${toolprefix}readelf"

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
      # is_clang = true
    }
    print("clang toolchain_args=${toolchain_args}")

    if (defined(invoker.shlib_extension) && invoker.shlib_extension != "") {
      shlib_extension = invoker.shlib_extension
    }
  }
}
